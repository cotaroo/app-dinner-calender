class LinebotController < ApplicationController

	require 'line/bot'

		def push

				@post = Post.find_by(start_time: Date.today)

				if @post == nil
					message = {
						type: 'text',
						text: "‰ªäÊó•„ÅØÊô©„Åî„ÅØ„Çì„ÇíÂÆ∂„ÅßÈ£ü„Åπ„Åæ„Åô„ÄÇ\nÂ§ú19ÊôÇ„Åî„Çç„Å´„ÅØÂÆ∂„Å´„ÅÑ„Çã„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ\nÂ§âÊõ¥„Åå„ÅÇ„Çå„Å∞ÈÄ£Áµ°„Åó„Åæ„Åô„ÄÇ\n„ÅÑ„Å§„ÇÇÁæéÂë≥„Åó„ÅÑ„ÅîÈ£Ø„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô"
					}
				else
				
					case @post.content
					when "‚óØ"
						message = {
							type: 'text',
							text: "‰ªäÊó•„ÅØÊô©„Åî„ÅØ„Çì„ÇíÂÆ∂„ÅßÈ£ü„Åπ„Åæ„Åô„ÄÇ\n#{@post.comment}„ÅÆ‰∫àÂÆö„Å™„ÅÆ„ÅßÈÅÖ„Åè„Å™„Çä„Åæ„Åôüôè\n„ÅÑ„Å§„ÇÇÁæéÂë≥„Åó„ÅÑ„ÅîÈ£Ø„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô"
						}
					when "‚ùå"
						message = {
							type: 'text',
							text: "‰ªäÊó•„ÅØ#{@post.comment}„ÅÆ‰∫àÂÆö„Å™„ÅÆ„Åß„ÄÅÊô©„Åî„ÅØ„Çì„ÅØ„ÅÑ„Çâ„Å™„ÅÑ„Åß„Åô„ÄÇ"
						}
					when "üî∫"
						message = {
							type: 'text',
							text: "‰ªäÊó•„ÅØÊô©„Åî„ÅØ„Çì„Å©„ÅÜ„Å™„Çã„Åã„Çè„Åã„Çâ„Å™„ÅÑ„Åß„Åôüò•\nÂàÜ„Åã„ÇäÊ¨°Á¨¨„ÄÅÈÄ£Áµ°„Åó„Åæ„Åô„ÄÇ\n„ÇÇ„Åó„ÄÅ„Åó„Å∞„Çâ„ÅèÈÄ£Áµ°„Åå„Å™„Åë„Çå„Å∞ÈÄ£Áµ°„Åó„Å¶„Åè„Çå„Çã„Å®„ÅÇ„Çä„Åå„Åü„ÅÑ„Åß„Åô„ÄÇ"
						}
					when "Êú™ÂÆö"
						message = {
							type: 'text',
							text: "‰ªäÊó•„ÅÆÊô©„Åî„ÅØ„ÇìÊÉÖÂ†±„Åß„Åô„Åå„ÄÅÊµ©Â§™ÈÉé„Åå‰∫àÂÆö„ÇíÊõ¥Êñ∞„ÅóÂøò„Çå„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅÊµ©Â§™ÈÉé„Å´Áõ¥Êé•ËÅû„ÅÑ„Å¶„ÇÇ„Çâ„Åà„Çã„Å®Âä©„Åã„Çä„Åæ„Åôüôè"
						}
					when ""
						message = {
							type: 'text',
							text: "‰ªäÊó•„ÅØÊô©„Åî„ÅØ„Çì„ÇíÂÆ∂„ÅßÈ£ü„Åπ„Åæ„Åô„ÄÇ\nÂ§ú19ÊôÇ„Åî„Çç„Å´„ÅØÂÆ∂„Å´„ÅÑ„Çã„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ\nÂ§âÊõ¥„Åå„ÅÇ„Çå„Å∞ÈÄ£Áµ°„Åó„Åæ„Åô„ÄÇ\n„ÅÑ„Å§„ÇÇÁæéÂë≥„Åó„ÅÑ„ÅîÈ£Ø„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô"
						}
					end

				end
		
        client = Line::Bot::Client.new { |config|
            config.channel_secret = "da5be14c010d092c6a188bf9fb79f071"
            config.channel_token = "l6MsxS40JGaFsZlSSR3br5fZ1i6Ofks3hELPEne65kqzM695FyfjS1fgVUMWB93Vt/XCa0mY9nZTdOJ7/eqYoQnFCzEEBDrV7kiILjIqqf7+1Nqj7vpxnmZO6vUgwYWhU4RzTt6hH49bykuVByprcwdB04t89/1O/w1cDnyilFU="
        }
        response = client.push_message("Ccbf94e2e1eac61156ffd7be4aee3f1bd", message)
        p response
		end
		
  # recieve„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆCSRF„Éà„Éº„ÇØ„É≥Ë™çË®º„ÇíÁÑ°Âäπ
  protect_from_forgery :except => [:recieve]

  def client
    @client ||= Line::Bot::Client.new { |config|
      config.channel_secret = "da5be14c010d092c6a188bf9fb79f071"
      config.channel_token = "l6MsxS40JGaFsZlSSR3br5fZ1i6Ofks3hELPEne65kqzM695FyfjS1fgVUMWB93Vt/XCa0mY9nZTdOJ7/eqYoQnFCzEEBDrV7kiILjIqqf7+1Nqj7vpxnmZO6vUgwYWhU4RzTt6hH49bykuVByprcwdB04t89/1O/w1cDnyilFU="
    }
  end

  def recieve
    body = request.body.read

    signature = request.env['HTTP_X_LINE_SIGNATURE']
    unless client.validate_signature(body, signature)
      head :bad_request
    end

    events = client.parse_events_from(body)

    events.each { |event|
			groupId = event['source']['groupId']  #groupIdÂèñÂæó
			p 'groupID: ' + groupId # groupId„ÇíÁ¢∫
    }

    head :ok
  end

end
